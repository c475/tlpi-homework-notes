******************** 30.1 Protecting Accesses to Shared Variables: Mutexes ********************

Critical section: a section of code that accesses a shared resource, and whose execution should be atomic.

See example code for an example of how to not access a shared variable.

mutex: "mutual exclusion": a thing to make sure only one thread can access a shared resource at a time.

a mutex has two states: locked and unlocked. attempting to lock an already locked mutex can either fail with an error, or block. Only one thread may hold a mutex lock at a time.

when a thread locks a mutex, it becomes the owner of that mutex. 


STATICALLY ALLOCATED MUTEXES:

pthread_mutex_t mtx = PTHREAD_MUTEX_INITIALIZER;

=========================================

#include <pthread.h>

int pthread_mutex_lock(pthread_mutex_t *mutex);

int pthread_mutex_unlock(pthread_mutex_t *mutex);

	Returns 0 on success, positive error number on error

=========================================

Only one thread can hold the lock at once.

Locking twice can lead to deadlock (or error sometimes)

Trying to obtain a lock when another thtread has it will block until the thread is granted the lock on the thread.

See example program.

there is also 

=========================================

pthread_mutex_trylock() (EBUSY if lock not available)

AND

pthread_mutex_timedlock() (times out after x amount of time, setting EBUSY)

=========================================

Try to avoid these, threads can end up starved of the lock in poorly designed applications.



30.1.3 - Performance of Mutexes:

Pretty good.

Mutexes are these days implemented in user space, requiring minumal system call overhead. These are called "futexes" or "Fast User Space Mutexes"



30.1.3 - Mutex Deadlocks:

Make sure that all of your threads attempt to lock/unlock the mutexes IN THE SAME ORDER otherwise things can get messed up and a thread will forever deadlock on waiting for a lock aquisition:

Thread A 								Thread B
1. pthread_mutex_lock(mutex1); 			1. pthread_mutex_lock(mutex2);
2. pthread_mutex_lock(mutex2); 			2. pthread_mutex_lock(mutex1);
				blocks 										blocks



30.1.3 - Dynamically Allocating a Mutex:

PTHREAD_MUTEX_INITIALIZER can only statically allocate a mutex with DEFAULT SETTINGS.

Might need to allocate one dynamically:

=========================================

#include <pthread.h>

int pthread_mutex_init(pthread_mutex_t *mutex, const pthread_mutexattr_t *attr);

	Returns 0 on success, or a positive error number on error

=========================================

If "attr" is NULL, then it is initialized with default values

pthread_mutexattr_t is s struct discussed shortly.

Reasons for dynamically allocating a mutex:

	1. The mutex was heap allocated, for example a linked list of structs with a "mutex" field to controll access to that struct.

	2. the mutex is an automatic variable allocated on the stack.

	3. want to statically allocate a mutex without default attributes.

you have to call this to destroy a dynamically allocated mutex:


=========================================

#include <pthread.h>

int pthread_mutex_destroy(pthread_mutex_t *mutex);

	Returns 0 on success, or positive error number on error

=========================================


https://refspecs.linuxbase.org/LSB_3.0.0/LSB-PDA/LSB-PDA/libpthread-ddefs.html

typedef struct {

  int __mutexkind;

} pthread_mutexattr_t;


Huh...


30.1.7- Mutex Types:

A few statements about mutexes have been made:

	1. A single thread may not lock a mutex twice.
	2. A thread cannot unlock a mutex it does not hold a lock on
	3. A thread cannot unlock a mutex that is not locked

What happens in these cases depends on the mutex type:


PTHREAD_MUTEX_NORMAL:

	(Self)-deadlock detection is not provided. If a thread tries to lock a locked mutex, it deadlocks.
	Unlocking a mutex that is not locked or is locked by another thread is undefined.

PTHREAD_MUTEX_ERRORCHECK:

	Error-checking is performed on all operations.
	All three of the above scenarios cause the relevant function to return an error.
	Typically slower than a normal mutex, but can be valueable in debugging.

PTHREAD_MUTEX_RECURSIVE:

	Each lock increments the "lock count". Each subsequent unlock decrements it.
	The mutex is truely unlocked when the lock count hits 0.

PTHREAD_MUTEX_DEFAULT:

	The default (what the static initializer does) (behaves like NORMAL on Linux)


Linux has static initializer equivalents of all these but don't use them (bc portability)


HERE IS HOW TO CREATE AN ERROR CHECKING MUTEX:


==================================================================

pthread_mutex_t mtx;
pthread_mutexattr_t mtxAttr;
int s;
int type;

s = pthread_mutexattr_init(&mtxAttr);
if (s != 0) {
	errExitEN(s, "pthread_mutexattr_init");
}

s = pthread_mutexattr_settype(&mtxAttr, PTHREAD_MUTEX_ERRORCHECK);
if (s != 0) {
	errExitEN(s, "pthread_mutexattr_init");
}

s = pthread_mutex_init(&mtx, &mtxAttr);
if (s != 0) {
	errExitEN(s, "pthread_mutex_init");
}


// no longer needed
s = pthread_mutexattr_destroy(&mtxAttr);
if (s != 0) {
	errExitEN(s, "pthread_mutexattr_destroy");
}

==================================================================



******************** 30.2 Signal9ing changes of state: Condition Variables ********************

They are always used in conjunction with a mutex.

They are used to indicate to other threads that the state in the shared (mutex protected) variable has changed.

SATICALLY ALLOCATED:

==================================================================

pthread_cond_t cont = PTHREAD_COND_INITIALIZER;

==================================================================


SIGNALLING AND WAITING ON CONDITION VARIABLES:


==================================================================

#include <pthread.h>

int pthread_cond_signal(pthread_cond_t *cond);
int pthread_cond_broadcast(pthread_cond_t *cond);
int pthread_cond_wait(pthread_cond_t *cont, pthread_mutex_t *mutex);

	Returns 0 on success, positive error number on error;

==================================================================

pthread_cond_signal: guarantees at least one thread is signalled and pthread_cond_wait() unblocks
pthread_cond_broadcast: all threads blocked on pthread_cond_wait() unblock
pthread_cond_wait: a little complex.


ROUGH USAGE OF pthread_cond_wait:

==============================================================================

pthread_mutex_lock();

/*
	The reason the predicate has to be in a while loop is
	that there is no guarantee that the predicate will be in the proper state
	when pthread_cond_wait() unblocks (though it usually will be)
*/
while (/* check state of variable */) {

	// this will UNLOCK the mutex, and sleep until a condition is signaled.
	// when a condition is signaled, it will automatically RELOCK the mutex
	// and continue execution
	pthread_cond_wait();
}

// do some stuff

pthread_mutex_unlock();

==============================================================================

REASONS FOR THE WHILE LOOP PREDICATE CHECK (#3 is interesting):

	1. Other thread may wake up and act on the predicate before the other thread.
		Therefore you must check the predicate again to make sure it is good to go.
	2. Designing for "loose" predicates may be an easier design choice.
		Instead of "there is something to do", it's "there MAY be something to do, check it"
	3. Sometimes threads just happen to wake up because of some dark impementation details or race condition.
		https://en.wikipedia.org/wiki/Spurious_wakeup



============= Joining ANY Thread ================

See example program.




DYNAMICALLY ALLOCATED CONDITION VARIABLES:

=====================================================

#include <pthread.h>

int pthread_cond_init(pthread_cond_t *cond, const pthread_condattr_t *attr);

	Returns 0 on success, or a positive error number on error

=====================================================


=====================================================

#include <pthread.h>

int pthread_cond_destroy(pthread_cond_t *cond);

	Returns 0 on success, or a positive error number on error

=====================================================



This is for if a condition variable is automatically or dynamically allocatedm or if you want to set attributes on it.

Apparently "struct pthread_condattr_t" just has a dummy field a lot of the time. Almost the same situation as pthread_mutexattr_t except that one has at least the "type" field.

