real time: wall clock time. the start of a process, to the end of a process.

process time: amount of cpu time used by the process. since a process isnt always using the cpu in the range of real time, it is almost always going to be lower than real time im assuming. It is useful 


first system call of the day:

#include <sys/time.h>

int gettimeofday(struct timeval *tv, struct timezone *tz);

struct timeval {
	time_t      tv_sec;			// seconds since 00:00:00, 1 Jan 1970 UTC
	suseconds_t tv_usec;		// additional microseconds (long int)
};

the "u" in tv_usec is supposed to be μ

the struct timezone *tz argument is a historical artifact that would return timezone info about the system. nowadays NULL should always be passed to it.

in fact, i guess gettimeofday() is obsolete, and POSIX clocks API should be used instead.


ANOTHER, this one is simple:

#include <time.h>

time_t time(time_t *timep);

returns # seconds since epoch, or -1 on error

if "timep" is not NULL, it also places the result at that pointer.

======================== ctime() ================

#include <time.h>

char *ctime(const time_t *timep);

returns a datetime terminated by \n\0, 26 bytes

the returned string is statically allocated


================= time_t to time struct ======================


#include <time.h>
struct tm *gmtime(const time_t * timep );
struct tm *localtime(const time_t * timep );
	Both return a pointer to a statically allocated broken-down
	time structure on success, or NULL on error

struct tm {
	int tm_sec;		// Seconds (0-60)
	int tm_min;		// Minutes (0-59)
	int tm_hour;	// Hours (0-23)
	int tm_mday;	// Day of the month (1-31)
	int tm_mon;		// Month (0-11)
	int tm_year;	// Year since 1900
	int tm_wday;	// Day of the week (Sunday = 0)
	int tm_yday;	// Day in the year (0-365; 1 Jan = 0)

	int tm_isdst;	// Daylight saving time flag
					// > 0: DST is in effect;
					// = 0: DST is not effect;
					// < 0: DST information not available
};


================= time struct to time_t ======================

#include <time.h>

time_t mktime(struct tm *timeptr);
	Returns seconds since the Epoch corresponding to timeptr
	on success, or (time_t) –1 on error

This may modify the time struct.

Say you have tm_sec = 120. This will convert tm_sec to 0 and add 2 to tm_min;

This makes datetime math easy.


If tm_isdst is 0, treat this time as standard time (i.e., ignore DST, even if it would
be in effect at this time of year).

If tm_isdst is greater than 0, treat this time as DST (i.e., behave as though DST is
in effect, even if it would not normally be so at this time of year).

If tm_isdst is less than 0, attempt to determine if DST would be in effect at this
time of the year. This is typically the setting we want.


================= time struct to STRING ======================


#include <time.h>

char *asctime(const struct tm *timeptr);
	Returns pointer to statically allocated string terminated by
	newline and \0 on success, or NULL on error



=============== strftime() ========================

#include <time.h>

size_t strftime(char *outstr, size_t maxsize, const char *format, const struct tm *timeptr);

RETURNS NUMBER OF BYTES WRITTEN TO char *outstr

char *outstr: the result...
size_t maxsize: maximum bytes to write to outstr
char *format: "%Y-%m-%d %H:%M:%S"
struct tm *timeptr: the actual date info...


================== OTHER DEFINES ======================

#define _XOPEN_SOURCE
#define _GNU_SOURCE

or you wont be able to use strptime...


================== LOCALES ============================

locale info is in /usr/share/locale or /usr/lib/locale

who cares come back later


#include <locale.h>

char *setlocale(int category, const char *locale);
return pointer to statically allocated string of the locale, else NULL if error

returns "de_DE", "en_US", etc.

const char *locale is "de_DE", "en_US", etc.


all you need to know:

$ LANG=de_DE ./show_time
ctime() of time() value is: Tue Feb 1 12:23:39 2011
asctime() of local time is: Tue Feb 1 12:23:39 2011
strftime() of local time is: Dienstag, 01 Februar 2011, 12:23:39 CET

$ LANG=de_DE LC_TIME=it_IT ./show_time
ctime() of time() value is: Tue Feb 1 12:24:03 2011
asctime() of local time is: Tue Feb 1 12:24:03 2011
strftime() of local time is: martedì, 01 febbraio 2011, 12:24:03 CET

$ LC_ALL=fr_FR LC_TIME=en_US
ctime() of time() value is:
asctime() of local time is:
strftime() of local time is:

$ LC_ALL=fr_FR LC_TIME=en_US ./show_time
Tue Feb 1 12:25:38 2011
Tue Feb 1 12:25:38 2011
mardi, 01 février 2011, 12:25:38 CET



====================== system clock ==================

#define _BSD_SOURCE
#include <sys/time.h>

int settimeofday(const struct timeval *tv, const struct timezone *tz);

returns 0 on success, -1 on error

THE USE OF THE *tz arg is OBSOLETE. set to NULL instead

changing the system clock abruptly can be harmful to a lot of applications, so maybe use this instead if you are worried about it:


#define _BSD_SOURCE
#include <sys/time.h>

int adjtime(struct timeval *delta, struct timeval *olddelta);

0 success, -1 error

This call will adjust the time every tick of the system clock, instead of abruptly and immediately, which is easier on applications depending on the tick of the system clock itself.


===================== PROCESS TIME =========================

$ time ./myprog
real    0m4.84s
user	0m1.030s
sys     0m3.43s


user: time cpu spent in user-mode
sys: time cpu spent in kernal-mode
real: actual clock time


====================== UGH ==================================

#include <sys/times.h>

The times() system call retrieves process time information, returning it in the struc-
ture pointed to by buf.

clock_t times(struct tms *buf);

struct tms {
	clock_t tms_utime; // user CPU time used by caller
	clock_t tms_stime; // system CPU time
	clock_t tms_ cutime; // user cpu time for all (waited for) children
	clock_t tms_cstime; // system cpu time for all (waited for) children
}

The last two fields return information
about the CPU time used by all child processes that have terminated and for which
the parent (i.e., the caller of times()) has done a wait() system call.

times() returns the REAL (clock time) since some arbitrary point in the past. it has issues though.

The reliable way to measure the passage of elapsed time is to use gettimeofday() (described in Section 10.1).

simpler version:

#include <time.h>

clock_t clock(void);
Returns total CPU time used by calling process measured in
CLOCKS_PER_SEC , or (clock_t) –1 on error

must divide the return value of clock() by 60 to get the num of seconds since it returns a value measured in CLOCKS_PER_SEC


======================== <sys/times.h> =========================

#include <sys/times.h>

 DESCRIPTION

    The <sys/times.h> header defines the structure tms, which is returned by times() and includes at least the following members:


    clock_t  tms_utime  user CPU time
    clock_t  tms_stime  system CPU time
    clock_t  tms_cutime user CPU time of terminated child processes
    clock_t  tms_cstime system CPU time of terminated child processes

    The clock_t type is defined as described in <sys/types.h>.

    The following is declared as a function and may also be defined as a macro. Function prototypes must be provided for use with an ISO C compiler.


    clock_t times(struct tms *);
