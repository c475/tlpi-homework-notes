******************** General Notes ********************

Semaphore is a kernel maintained integer. It can be set to a value, incremented, or decremented.

If a process tries to decrement a semaphore below 0, then it blocks until the semaphore is >= 1, so it can decrement it to 0.

A process can also "wait" for a semaphore to be 0.



******************** 47.1 Overview ********************

Steps:

1. create or open a semaphore set with semget()
2. initialize the set with semctl() SETVAL or SETALL operation.
3. perform operations on semaphores with semop()
4. when processes are done using the semaphore set, remove it with semctl() with the IPC_RMID operation.


******************** 47.2 Creating or Opening a Semaphore Set ********************

Creating a semaphore set, or retrieving an existing set:

======================================

#include <sys/types.h> // portability
#include <sys/sem.h>

int semget(key_t key, int nsems, int semflg);

    Returns a semaphore set ID, or -1 on error

======================================

"key" is usually IPC_PRIVATE, or a key generated by ftok().

"nsems" is the number of semaphores in the set if CREATING, If RETRIEVING, it is a number that is equal to or less than the size of the set being retrieved.

"semflg" is a permissions mask when creating or retrieving.


******************** 47.3 Semaphore Control Operations ********************

======================================

#include <sys/types.h>
#include <sys/sem.h>

int semctl(int semid, int semnum, int cmd, .. /* union semun arg */);

    Returns nonnegative integer on success (see text); returns -1 on error

======================================

"semid" is the id of a semaphore set

"semnum" is the index of the semaphore in the set. for other operations, this argument is ignored and can be set to 0.

"cmd": some command:

    IPC_RMID:
        Remove the semaphore set immediately.
        "arg" is not required.
        process blocking on the semaphore with semop() are awakened with errno = EIDRM

    IPC_STAT:
        Place struct semid_ds in the buffer of arg.buf.

    IPC_SET:
        Update fields of semid_ds with the argument in "arg.buf"

    GETVAL
        Returns the value of semaphore.
        Arg not required

    SETVAL
        Set the semaphore value.
        Value should be places in "arg.val"

    GETALL
        Get the values of all semaphores.
        They are places in "arg.array" (this is getting too complicated)
        You can use "semid_ds.sem_nsems" from an IPC_STAT call.

    SETALL
        
        

Some operations require a fourth argument, which is the union shown in the "semun.h" header file...

"semun" was a required parameter in older linux/unix, but is now optional. For portability you may want to specify a dummy argument even if it isnt needed.

