Things System V IPC has:

    1. Message queues: Sorta like pipes except there are message boundries. It is not a byte stream. You read one message at a time from the "pipe".

    2. Semaphores: a method of inter-process synchronization. You can increment (release) or decrement (lock) a semaphore (in the case that it is a binary semaphore. It does not have to be). The meaning of a semaphore is application depepndent.

    3. Shared memory: allows processes to share the same virtual memory. This is accomplished by the kernel, allowing processes to share pages of virtual memory.


******************** 45.1 API Overview ********************

Interface               Message queues          Semaphores          Shared memory
========================================================================================
Header file             <sys/msg.h>             <sys/sem.h>         <sys/shm.h>
Data structure          msqid_ds                semid_ds            shmid_ds
Create/open object      msgget()                semget()            shmget() + shmat()
Close object            (none)                  (none)              shmdt()
Control operations      msgctl()                semctl()            shmctl()
Performing IPC          msgsnd() - write        semop() - test/adj  access memory in shared region
                        msgrcv() - read
========================================================================================

Basically, you "get" an IPC identifier then use it in calls, like a file descriptor.

The "get" call can either create or retrieve an IPC object, returning its "id".

You generate this key with ftok().

The "ctl" functions are a range of control options on the PIC mechanism. An example for removing a shared memory object:

if (shmctl(id, IPC_RMID, NULL) == -1) {
    errExit("shmctl");
}

For message queues and semaphores, deletion is immediate. However with shared memory segments it is not deleted until every process using it "detaches" it.

System V objects have kernel persistence, as in they exist until system shutdown or manual deletion.


******************** 45.2 IPC Keys ********************

Use IPC_PRIVATE or ftok() to generate a key.

IPC_PRIVATE is pretty good if a parent process is going to fork(), where the child will inherit the key. It can be used with unrelated processes, but the creator would have to find some way of handing the key to to other process (writing it to a file, etc).

ftok():

============================================

#include <sys/ipc.h>

key_t ftok(char *pathname, int proj);

    Returns integer key on success, or -1 on error

============================================

1. Only the least 8 significant bits of "proj" are used, effectively making it a "char" argument.

2. The "pathname" must be a file that exists, that stat() can be called on (otherwise ftok() returns -1)

3. If the same pathname using the same "proj" value is supplied to ftok(), it must return the same value every time.

4. Typically "pathname" is a file created by the aplication using SYSV IPC itself.

5. There is a small chance of key collision because the least significant bits of an inode number can be the same on a different file system (different mount).

Typical usage of ftok():

=======================================================

key_t key;
int id;

// obtain the IPC key
key = ftok("/path/to/file", 'x');
if (key == -1) {
    errExit("ftok");
}

// use the IPC key to obtain the IPC object
id = msgget(key, IPC_CREAT | S_IRUSR | S_IWUSR);
if (id == -1) {
    errExit("msgget");
}

=======================================================



******************** 45.3 Associated Data Structure and Object Permissions ********************

For each IPC mechanism (message queue, semaphore, shared memory), the kernel keeps an internal data structure representing it.

This data structure can be obtained by the appropriate "ctl" call.

This is a permissions substructure that exists in all of those:

struct ipc_perm {
    key_t           __key;  // key, as supplied to 'get' call
    uid_t           uid;    // owner's user ID
    gid_t           gid;    // owner's group ID
    uid_t           cuid;   // creator's user ID
    gid_t           cgid;   // creator's group ID
    unsigned short  mode;   // permissions
    unsigned short  __seq;  // sequence number
};

Example of modifying the permissions on an IPC object

===============================================================

struct shmid_ds shmds;

if (shmctl(id, IPC_STAT, &shmds) == -1) {
    errExit("shmctl");
}

shmds.shm_perm.uid = newuid;

if (shmctl(id, IPC_SET, &shmds) == -1) {
    errExit("shmctl");
}

===============================================================

The algorithm for determining if a process is able to interact with the IPC facility:

The precise rules governing the permissions a process is granted on an IPC object are as follows:

    1. If the process is privileged ( CAP_IPC_OWNER ), then all permissions are granted on
    the IPC object.

    2. If the effective user ID of the process matches either the owner or the creator
    user ID of the IPC object, then the process is granted the permissions defined
    for the owner (user) of the object.

    3. If the effective group ID or any of the supplementary group IDs of the process
    match either the owner group ID or the creator group ID of the IPC object,
    then the process is granted the group permissions defined for the object.

    4. Otherwise, the process is granted the permissions defined for other.

Permissions for common operations on SYSV IPC:

    1. Need read permission to read a message from a queue, get the value of a sepaphore, attach a shared memory segment for reading.

    2. need write permission to write a message to a queue, change the value of a semaphore, attach a shared memory segment for writing.

    3. Neither read or write permissions are checked for removal (IPC_RMID). The process' effective user id must match the IPC's owner user id, or creator ID, or have CAP_SYS_ADMIN.

    4. It is possible to set the permissions on an IPC object so that the owner or creator can no longer use IPC_STAT to obtain the data structure. This means that the "ipcs" command will no longer pick them up, though you can still use IPC_STAT to change them.


******************** 45.4 IPC Identifiers and Client-Server Applications ********************

Usually the server creates the IPC facilities, and the client just connects to them (uses the get() calls but omits the IPC_CREAT flag).

If a server terminates unexpectedly, then it should remake all the IPC instances (i.e. delete then create). The clients should be programmed to handle this case. The reason is that the server may not have the context required to reuse the IPC mechanisms (for example, the client may send two messages in response to one of the server, i.e. not a 1-to-1 relationship).

This is handled by the IPC_EXCL flag, which ensures that the server is the creator of the IPC object.

See example program.


******************** 45.6 Algorithm Employed by System V IPC get Calls ********************

"ipcs" and "ipcrm" are basically the "ls" and "rm" of System V IPC.

On Linux and some other implementations, "ipcs" displays all the IPCs that the user has read access to. On some oher implementations, it just displays all objects regardless of permissions.

"ipcrm" usually takes the two forms:

    # Delete semaphores
    $ ipcrm -S key
    $ ipcrm -s id

    # Delete message queues
    $ ipcrm -Q key
    $ ipcrm -q id

    # Delete shared memory
    $ ipcrm -M key
    $ ipcrm -m id


******************** 45.7 Obtaining a List of All IPC Objects ********************

/proc/sysvipc lists all SysV IPC objects on the system (on Linux).

